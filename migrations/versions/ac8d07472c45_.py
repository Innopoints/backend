"""empty message

Revision ID: ac8d07472c45
Revises: 133713371337
Create Date: 2019-12-23 01:06:15.149589

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "ac8d07472c45"
down_revision = "133713371337"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(
        "unique order indices",
        "product_images",
        ["variety_id", "order"],
        deferrable=True,
        initially="DEFERRED",
    )
    op.create_unique_constraint("unique product", "products", ["name", "type"])
    op.create_unique_constraint(
        "only one application", "applications", ["applicant_email", "activity_id"]
    )
    # ### end Alembic commands ###
    op.create_check_constraint("non-negative order", "product_images", '"order" >= 0')
    op.create_check_constraint("non-negative price", "products", "price >= 0")
    op.drop_constraint("feedback xor stock_change", "transactions", type_="check")
    op.create_check_constraint(
        "not(feedback and stock_change)",
        "transactions",
        "(stock_change_id IS NULL) OR (feedback_id IS NULL)",
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("unique order indices", "product_images", type_="unique")
    op.drop_constraint("unique product", "products", type_="unique")
    op.drop_constraint("only one application", "applications", type_="unique")
    # ### end Alembic commands ###
    op.drop_constraint("non-negative order", "product_images", type_="check")
    op.drop_constraint("non-negative price", "products", type_="check")
    op.drop_constraint("not(feedback and stock_change)", "transactions", type_="check")
    op.create_check_constraint(
        "feedback xor stock_change",
        "transactions",
        "(stock_change_id IS NULL) != (feedback_id IS NULL)",
    )
