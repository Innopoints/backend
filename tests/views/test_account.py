from typing import Tuple, Generator

import pytest
from faker import Faker

from innopoints.models import Account, Transaction
from innopoints.extensions import db

pytest_plugins = 'tests.db_fixtures.account'


@pytest.fixture
def student_with_ipts(
    logged_in_student: Tuple[Account, str],
    faker: Faker
) -> Generator[Tuple[Account, str], None, None]:
    '''Give some innopoints to the logged in user.'''
    user, token = logged_in_student

    amount = faker.random_int(min=1)
    transaction = Transaction(account=user, change=amount)
    db.session.add(transaction)
    db.session.commit()

    yield (user, token)

    db.session.delete(transaction)
    db.session.commit()


class TestGetInfo:
    '''Test the `/account` endpoint (and its alias, `/accounts/:email`)'''

    @staticmethod
    def generate_expected_data(user: Account, csrf_token: str):
        '''Return the data in the format that is generated by the /account endpoint.'''
        return {
            'email': user.email,
            'full_name': user.full_name,
            'group': user.group,
            'telegram_username': user.telegram_username,
            'is_admin': user.is_admin,
            'balance': user.balance,
            'csrf_token': csrf_token,
        }

    def test_account_new_student(self, client, logged_in_student):
        '''When a regular student without any innopoints is logged in.
           Tests the /account endpoint.'''
        user, csrf_token = logged_in_student
        actual_data = client.json('/api/v1/account')

        expected_data = self.generate_expected_data(user, csrf_token)
        assert actual_data == expected_data

    def test_account_returning_student(self, client, student_with_ipts):
        '''When a regular student with innopoints is logged in.
           Tests the /account endpoint.'''
        user, csrf_token = student_with_ipts
        actual_data = client.json('/api/v1/account')

        expected_data = self.generate_expected_data(user, csrf_token)
        assert actual_data == expected_data
        assert user.balance != 0

    def test_account_admin(self, client, logged_in_admin):
        '''When an administrator is logged in.
           Tests the /account endpoint.'''
        user, csrf_token = logged_in_admin
        actual_data = client.json('/api/v1/account')

        expected_data = self.generate_expected_data(user, csrf_token)
        assert actual_data == expected_data

    @staticmethod
    def test_without_login(client):
        '''When the requester is not authenticated.
           Tests the /account endpoint.'''
        response = client.get('/api/v1/account')
        print(dir(response))
        assert response.status_code == 401
        assert not response.get_data()
