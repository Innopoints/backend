openapi: 3.0.1
info:
  title: Innopoints API
  description: Describes the endpoints exposed by the API of Innopoints. This is only for internal use at Innopolis University.
  # termsOfService: http://swagger.io/terms/
  contact:
    email: innopoints@innopolis.university
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

externalDocs:
  description: Additional detailed documentation on Notion
  url: https://www.notion.so/innopoints/

servers:
- url: https://innopoints-backend.herokuapp.com/api/v1/
- url: http://localhost:7507/api/v1/
- url: Something on innopolis servers

tags:
- name: product
  description: Items you can buy from the store
- name: variety
  description: Variations of products
- name: project
  description: An event you can volunteer on
- name: activity
  description: They make up a project
- name: application
  description: Volunteer wants to work on an activity
- name: account
  description: Someone
- name: notification
  description: Telling someone that something happened

paths:
  /products:
    get:
      tags:
      - product
      summary: List all existing products
      operationId: listProducts
      parameters:
        - name: page
          description: Page number
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          description: Maximum number of elemenets
          in: query
          schema:
            type: integer
            default: 24
            minimum: 1
          example: 10
        - name: order_by
          description: Parameter to sort products by
          in: query
          schema:
            type: string
            enum: [addition_time, price]
            default: addition_time
          example: price
        - name: order
          description: Which way to order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          example: price
        - name: q
          description: Search query
          in: query
          schema:
            type: string
          required: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    pages:
                      type: integer
                      description: total number of pages with the given limit
                      minimum: 1
                      example: 6
                    data:
                      $ref: '#/components/schemas/Product'
        400:
          description: Invalid query
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bad query parameters
    post:
      tags:
      - product
      summary: Add a new item to the store
      operationId: addProduct
      requestBody:
        description: Item object to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: Created product is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - innopolis_sso: []
  /products/{product_id}:
    parameters:
    - name: product_id
      in: path
      description: ID of the product in the database
      required: true
      schema:
        type: integer
        minimum: 1
    get:
      tags:
      - product
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: not found
    patch:
      tags:
      - product
      requestBody:
        description: What to edit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: success. no payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: unauthorized
        404:
          description: product not found
      security:
        - innopolis_sso: []
    delete:
      tags:
      - product
      responses:
        204:
          description: success. no payload
        401:
          description: unauthorized
        404:
          description: product not found
      security:
        - innopolis_sso: []

  /products/{product_id}/varieties/:
    parameters:
    - name: product_id
      in: path
      description: ID of the product in the database
      required: true
      schema:
        type: integer
        minimum: 1
    post:
      tags:
        - variety
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variety'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variety'
        401:
          description: unauthorized
        404:
          description: product not found

      security:
        - innopolis_sso: []
  /products/{product_id}/varieties/{variety_id}:
    parameters:
    - name: product_id
      in: path
      description: ID of the product in the database
      required: true
      schema:
        type: integer
        minimum: 1
    - name: variety_id
      in: path
      description: ID of the variety in the database
      required: true
      schema:
        type: integer
        minimum: 1
    patch:
      tags:
        - variety
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variety'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variety'
        400:
          description: invalid data
        401:
          description: unauthorized
        404:
          description: product/variety not found

      security:
        - innopolis_sso: []
    delete:
      tags:
        - variety
      responses:
        204:
          description: success. no payload
        400:
          description: invalid data
        401:
          description: unauthorized
        404:
          description: product/variety not found

      security:
        - innopolis_sso: []
  /products/{product_id}/varieties/{variety_id}/purchase:
    parameters:
    - name: product_id
      in: path
      description: ID of the product in the database
      required: true
      schema:
        type: integer
        minimum: 1
    - name: variety_id
      in: path
      description: ID of the variety in the database
      required: true
      schema:
        type: integer
        minimum: 1
    post:
      tags:
        - variety
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  minimum: 1
                  example: 1
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockChange'
        400:
          description: invalid data
        401:
          description: unauthorized
        404:
          description: product/variety not found

      security:
        - innopolis_sso: []
  /stock_changes/for_review:
    get:
      tags:
        - variety
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockChange'
        401:
          description: unauthorized. admins only
      security:
        - innopolis_sso: []
  /stock_changes/{stock_change_id}/status:
    parameters:
      - name: stock_change_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
    patch:
      tags:
        - variety
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/StockChangeStatus'
      responses:
        204:
          description: success
      security:
        - innopolis_sso: []
  /sizes:
    get:
      tags:
        - variety
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      $ref: '#/components/schemas/Variety/properties/size'
    post:
      tags:
      - variety
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: '#/components/schemas/Variety/properties/size'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    $ref: '#/components/schemas/Variety/properties/size'
        400:
          description: invalid request data
        401:
          description: unauthorized. admins only
      security:
        - innopolis_sso: []
  /colors:
    get:
      tags:
        - variety
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      # TODO: prefix with '#'
                      $ref: '#/components/schemas/Variety/properties/color'
    post:
      tags:
      - variety
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: '#/components/schemas/Variety/properties/color'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    $ref: '#/components/schemas/Variety/properties/color'
        400:
          description: invalid request
        401:
          description: unauthorized. admins only
      security:
        - innopolis_sso: []

  /projects:
    get:
      tags:
      - project
      parameters:
        - name: order_by
          in: query
          schema:
            type: string
            enum: [creation, proximity]
            default: creation
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: q
          in: query
          description: search query
          schema:
            type: string
            nullable: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                  - $ref: '#/components/schemas/Project'
                  - type: object
                    properties:
                      varieties:
                        type: array
                        items:
                          $ref: '#/components/schemas/Activity'
        400:
          description: invalid query parameters
    post:
      tags:
      - project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: invalid request data
        401:
          description: unauthorized
      security:
        - innopolis_sso: []
  /projects/drafts:
    get:
      tags:
      - project
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        401:
          description: unauthorized
      security:
        - innopolis_sso: []
  /projects/past:
    get:
      tags:
      - project
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 12
        - name: q
          in: query
          schema:
            type: string
          required: false
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        400:
          description: bad query parameters
  /projects/for_review:
    get:
      tags:
      - project
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        401:
          description: unauthorized. admins only
      security:
      - innopolis_sso: []
  /projects/{project_id}/publish:
    patch:
      tags:
      - project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        204:
          description: success. no payload
        400:
          description: invalid request data
        401:
          description: unauthorized
        404:
          description: project not found
      security:
        - innopolis_sso: []
  /projects/{project_id}/request_review:
    patch:
      tags:
      - project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        204:
          description: success. no payload
        400:
          description: invalid request data
        401:
          description: unauthorized
        404:
          description: project not found
      security:
        - innopolis_sso: []
  /projects/{project_id}/finalize:
    patch:
      tags:
      - project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        204:
          description: success. no payload
        400:
          description: invalid request data
        401:
          description: unauthorized
        404:
          description: project not found
      security:
        - innopolis_sso: []
  /projects/{project_id}/review_status:
    patch:
      tags:
      - project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                review_status:
                  type: string
                  enum: [approved, rejected]
                admin_feedback:
                  type: string
                  nullable: true
                  example: Great work everyone!       
      responses:
        204:
          description: success. no payload
        400:
          description: invalid request data
        401:
          description: unauthorized
        404:
          description: project not found
      security:
        - innopolis_sso: []
  /projects/{project_id}:
    parameters:
    - name: project_id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
    get:
      tags:
        - project
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          description: project not found
    patch:
      tags:
      - project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: invalid request data
        401:
          description: unauthorized
        404:
          description: project not found
    delete:
      tags:
      - project
      responses:
        204:
          description: success. no payload
        400:
          description: data integrity violated
        401:
          description: unauthorized
        404:
          description: project not found
      security:
        - innopolis_sso: []

  /projects/{project_id}/activities:
    parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
    post:
      tags:
      - activity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        400:
          description: invalid data
        401:
          description: unauthorized
        404:
          description: project not found
      security:
        - innopolis_sso: []
  /projects/{project_id}/activities/{activity_id}:
    parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
      - name: activity_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
    patch:
      tags:
      - activity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        400:
          description: invalid data
        401:
          description: unauthorized
        404:
          description: project/activity not found
      security:
        - innopolis_sso: []
    delete:
      tags:
      - activity
      responses:
        200:
          description: success
        400:
          description: invalid data
        401:
          description: unauthorized
        404:
          description: project/activity not found
      security:
        - innopolis_sso: []
  /competences:
    get:
      tags:
        - activity
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competence'
    post:
      tags:
        - activity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competence'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competence'
        400:
          description: invalid data
        401:
          description: unauthorized
      security:
        - innopolis_sso: []
  /competences/{competence_id}:
    parameters:
      - name: competence_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
    patch:
      tags:
        - activity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competence'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competence'
        400:
          description: invalide data
        401:
          description: unauthorized
        404:
          description: competence not found
      security:
        - innopolis_sso: []
    delete:
      tags:
        - activity
      responses:
        204:
          description: success. no payload
        400:
          description: invalid data
        401:
          description: unauthorized
      security:
        - innopolis_sso: []

  /account/{email}:
    parameters:
    - name: email
      in: path
      description: email of the requested account
      required: true
      schema:
        type: string
        format: email
        nullable: true
    get:
      tags:
      - account
      summary: Get current user info
      description: If the user is logged in, get their information
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
      security:
      - innopolis_sso: []
  /account/{email}/balance:
    parameters:
    - name: email
      in: path
      description: email of the requested account
      required: true
      schema:
        type: string
        format: email
    patch:
      tags:
      - account
      summary: Modify the user's balance
      description: Update the user's balance by a number that can be positive or negative
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                change:
                  type: integer
                  example: 340
      responses:
        204:
          description: success. no payload
      security:
      - innopolis_sso: []


components:
  schemas:
    Account:
      type: object
      properties:
        full_name:
          type: string
          example: Abdelrahman Abounegm
        group:
          type: string
          example: BS18-04
          nullable: true
        email:
          type: string
          format: email
        telegram_username:
          type: string
          minLength: 4
          maxLength: 32
          nullable: true
        is_admin:
          type: boolean
          default: false
        balance:
          type: integer
    Transaction:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        account_email:
          type: string
          format: email
        change:
          type: integer
        stock_change_id:
          type: integer
          minimum: 1
          nullable: true
        feedback_id:
          type: integer
          minimum: 1
          nullable: true

    Product:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
          example: ASCII Whale
        type:
          type: string
          nullable: true
          example: T-Shirt
        description:
          type: string
          example: Just a shirt
        varieties:
          type: array
          items:
            $ref: '#/components/schemas/Variety'
          minLength: 1
        price:
          type: integer
        addition_time:
          type: string
          format: date-time
    Variety:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        product_id:
          type: integer
          minimum: 1
        size:
          type: string
          maxLength: 3
          nullable: true
          example: XL
        color:
          type: string
          minLength: 6
          maxLength: 6
          nullable: true
          example: c0ff32
        images:
          type: array
          items:
            type: object
            properties:
              image_id:
                type: integer
                minimum: 1
              order:
                type: integer
    StockChange:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        amount:
          type: integer
        time:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/StockChangeStatus'
        account_email:
          type: string
          format: email
        variety_id:
          type: integer
          minimum: 1
    StockChangeStatus:
      type: string
      enum:
      - pending
      - ready_for_pickup
      - carried_out
      - rejected
      example: pending

    Project:
      type: object
      properties:
        name:
          type: string
          example: Olympiad
        image_id:
          type: integer
          nullable: true
        creation_time:
          type: string
          format: date-time
        organizer:
          type: string
          example: Events department
          nullable: true
        creator_email:
          type: string
          format: email
        admin_feedback:
          type: string
          maxLength: 1024
          nullable: true
        review_status:
          type: string
          enum: [pending, approved, rejected]
          nullable: true
        lifetime_stage:
          type: string
          enum: [draft, ongoing, finalizing, finished]
          default: draft
    Activity:
      type: object
      properties:
        name:
          type: string
          maxLength: 128
          nullable: true
        description:
          type: string
          maxLength: 1024
          nullable: true
        timeframe:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
          nullable: true
        project_id:
          type: integer
          minimum: 1
        working_hours:
          type: integer
          minimum: 1
          default: 1
        reward_rate:
          type: integer
          minimum: 0
          default: 70
        fixed_reward:
          type: boolean
          default: false
        people_required:
          type: integer
          minimum: 0
          default: 0
        telegram_required:
          type: boolean
          default: false
        feedback_question:
          type: array
          items:
            type: string
          example:
           - "What did you learn from this volunteering opportunity?"
           - "What could be improved in the organization?"
    Competence:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
          example: Teamwork

    Error:
      type: object
      properties:
        message:
          type: string
          example: invalid input

  securitySchemes:
    innopolis_sso:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: /login
          scopes: {}
    api_key:
      type: apiKey
      name: api_key
      in: cookie
